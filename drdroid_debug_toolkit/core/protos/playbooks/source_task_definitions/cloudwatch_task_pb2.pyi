"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Cloudwatch(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TaskType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TaskTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Cloudwatch._TaskType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Cloudwatch._TaskType.ValueType  # 0
        METRIC_EXECUTION: Cloudwatch._TaskType.ValueType  # 1
        FILTER_LOG_EVENTS: Cloudwatch._TaskType.ValueType  # 2
        RDS_GET_SQL_QUERY_PERFORMANCE_STATS: Cloudwatch._TaskType.ValueType  # 3
        ECS_LIST_CLUSTERS: Cloudwatch._TaskType.ValueType  # 4
        ECS_LIST_TASKS: Cloudwatch._TaskType.ValueType  # 5
        ECS_GET_TASK_LOGS: Cloudwatch._TaskType.ValueType  # 6
        FETCH_DASHBOARD: Cloudwatch._TaskType.ValueType  # 7
        FETCH_S3_FILE: Cloudwatch._TaskType.ValueType  # 8

    class TaskType(_TaskType, metaclass=_TaskTypeEnumTypeWrapper): ...
    UNKNOWN: Cloudwatch.TaskType.ValueType  # 0
    METRIC_EXECUTION: Cloudwatch.TaskType.ValueType  # 1
    FILTER_LOG_EVENTS: Cloudwatch.TaskType.ValueType  # 2
    RDS_GET_SQL_QUERY_PERFORMANCE_STATS: Cloudwatch.TaskType.ValueType  # 3
    ECS_LIST_CLUSTERS: Cloudwatch.TaskType.ValueType  # 4
    ECS_LIST_TASKS: Cloudwatch.TaskType.ValueType  # 5
    ECS_GET_TASK_LOGS: Cloudwatch.TaskType.ValueType  # 6
    FETCH_DASHBOARD: Cloudwatch.TaskType.ValueType  # 7
    FETCH_S3_FILE: Cloudwatch.TaskType.ValueType  # 8

    @typing_extensions.final
    class EcsListClusters(google.protobuf.message.Message):
        """No parameters needed for listing all clusters"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class EcsListTasks(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CLUSTER_NAME_FIELD_NUMBER: builtins.int
        @property
        def cluster_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            cluster_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["cluster_name", b"cluster_name"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cluster_name", b"cluster_name"]) -> None: ...

    @typing_extensions.final
    class EcsGetTaskLogs(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CLUSTER_NAME_FIELD_NUMBER: builtins.int
        TASK_DEFINITION_FIELD_NUMBER: builtins.int
        MAX_LINES_FIELD_NUMBER: builtins.int
        @property
        def cluster_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def task_definition(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def max_lines(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
        def __init__(
            self,
            *,
            cluster_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            task_definition: google.protobuf.wrappers_pb2.StringValue | None = ...,
            max_lines: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["cluster_name", b"cluster_name", "max_lines", b"max_lines", "task_definition", b"task_definition"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cluster_name", b"cluster_name", "max_lines", b"max_lines", "task_definition", b"task_definition"]) -> None: ...

    @typing_extensions.final
    class MetricExecution(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class Dimension(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            NAME_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            @property
            def name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
            @property
            def value(self) -> google.protobuf.wrappers_pb2.StringValue: ...
            def __init__(
                self,
                *,
                name: google.protobuf.wrappers_pb2.StringValue | None = ...,
                value: google.protobuf.wrappers_pb2.StringValue | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["name", b"name", "value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "value", b"value"]) -> None: ...

        NAMESPACE_FIELD_NUMBER: builtins.int
        REGION_FIELD_NUMBER: builtins.int
        METRIC_NAME_FIELD_NUMBER: builtins.int
        DIMENSIONS_FIELD_NUMBER: builtins.int
        STATISTIC_FIELD_NUMBER: builtins.int
        TIMESERIES_OFFSETS_FIELD_NUMBER: builtins.int
        PERIOD_FIELD_NUMBER: builtins.int
        @property
        def namespace(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def region(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def metric_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Cloudwatch.MetricExecution.Dimension]: ...
        @property
        def statistic(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def timeseries_offsets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        @property
        def period(self) -> google.protobuf.wrappers_pb2.UInt64Value: ...
        def __init__(
            self,
            *,
            namespace: google.protobuf.wrappers_pb2.StringValue | None = ...,
            region: google.protobuf.wrappers_pb2.StringValue | None = ...,
            metric_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            dimensions: collections.abc.Iterable[global___Cloudwatch.MetricExecution.Dimension] | None = ...,
            statistic: google.protobuf.wrappers_pb2.StringValue | None = ...,
            timeseries_offsets: collections.abc.Iterable[builtins.int] | None = ...,
            period: google.protobuf.wrappers_pb2.UInt64Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["metric_name", b"metric_name", "namespace", b"namespace", "period", b"period", "region", b"region", "statistic", b"statistic"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dimensions", b"dimensions", "metric_name", b"metric_name", "namespace", b"namespace", "period", b"period", "region", b"region", "statistic", b"statistic", "timeseries_offsets", b"timeseries_offsets"]) -> None: ...

    @typing_extensions.final
    class FilterLogEvents(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        REGION_FIELD_NUMBER: builtins.int
        LOG_GROUP_NAME_FIELD_NUMBER: builtins.int
        FILTER_QUERY_FIELD_NUMBER: builtins.int
        @property
        def region(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def log_group_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def filter_query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            region: google.protobuf.wrappers_pb2.StringValue | None = ...,
            log_group_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            filter_query: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["filter_query", b"filter_query", "log_group_name", b"log_group_name", "region", b"region"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["filter_query", b"filter_query", "log_group_name", b"log_group_name", "region", b"region"]) -> None: ...

    @typing_extensions.final
    class RdsGetSqlQueryPerformanceStats(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DB_RESOURCE_URI_FIELD_NUMBER: builtins.int
        @property
        def db_resource_uri(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            db_resource_uri: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["db_resource_uri", b"db_resource_uri"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["db_resource_uri", b"db_resource_uri"]) -> None: ...

    @typing_extensions.final
    class FetchDashboard(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DASHBOARD_NAME_FIELD_NUMBER: builtins.int
        STEP_FIELD_NUMBER: builtins.int
        @property
        def dashboard_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def step(self) -> google.protobuf.wrappers_pb2.Int32Value: ...
        def __init__(
            self,
            *,
            dashboard_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            step: google.protobuf.wrappers_pb2.Int32Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["dashboard_name", b"dashboard_name", "step", b"step"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dashboard_name", b"dashboard_name", "step", b"step"]) -> None: ...

    @typing_extensions.final
    class FetchS3File(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        BUCKET_NAME_FIELD_NUMBER: builtins.int
        OBJECT_KEY_FIELD_NUMBER: builtins.int
        @property
        def bucket_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def object_key(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            bucket_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            object_key: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["bucket_name", b"bucket_name", "object_key", b"object_key"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["bucket_name", b"bucket_name", "object_key", b"object_key"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    METRIC_EXECUTION_FIELD_NUMBER: builtins.int
    FILTER_LOG_EVENTS_FIELD_NUMBER: builtins.int
    RDS_GET_SQL_QUERY_PERFORMANCE_STATS_FIELD_NUMBER: builtins.int
    ECS_LIST_CLUSTERS_FIELD_NUMBER: builtins.int
    ECS_LIST_TASKS_FIELD_NUMBER: builtins.int
    ECS_GET_TASK_LOGS_FIELD_NUMBER: builtins.int
    FETCH_DASHBOARD_FIELD_NUMBER: builtins.int
    FETCH_S3_FILE_FIELD_NUMBER: builtins.int
    type: global___Cloudwatch.TaskType.ValueType
    @property
    def metric_execution(self) -> global___Cloudwatch.MetricExecution: ...
    @property
    def filter_log_events(self) -> global___Cloudwatch.FilterLogEvents: ...
    @property
    def rds_get_sql_query_performance_stats(self) -> global___Cloudwatch.RdsGetSqlQueryPerformanceStats: ...
    @property
    def ecs_list_clusters(self) -> global___Cloudwatch.EcsListClusters: ...
    @property
    def ecs_list_tasks(self) -> global___Cloudwatch.EcsListTasks: ...
    @property
    def ecs_get_task_logs(self) -> global___Cloudwatch.EcsGetTaskLogs: ...
    @property
    def fetch_dashboard(self) -> global___Cloudwatch.FetchDashboard: ...
    @property
    def fetch_s3_file(self) -> global___Cloudwatch.FetchS3File: ...
    def __init__(
        self,
        *,
        type: global___Cloudwatch.TaskType.ValueType = ...,
        metric_execution: global___Cloudwatch.MetricExecution | None = ...,
        filter_log_events: global___Cloudwatch.FilterLogEvents | None = ...,
        rds_get_sql_query_performance_stats: global___Cloudwatch.RdsGetSqlQueryPerformanceStats | None = ...,
        ecs_list_clusters: global___Cloudwatch.EcsListClusters | None = ...,
        ecs_list_tasks: global___Cloudwatch.EcsListTasks | None = ...,
        ecs_get_task_logs: global___Cloudwatch.EcsGetTaskLogs | None = ...,
        fetch_dashboard: global___Cloudwatch.FetchDashboard | None = ...,
        fetch_s3_file: global___Cloudwatch.FetchS3File | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ecs_get_task_logs", b"ecs_get_task_logs", "ecs_list_clusters", b"ecs_list_clusters", "ecs_list_tasks", b"ecs_list_tasks", "fetch_dashboard", b"fetch_dashboard", "fetch_s3_file", b"fetch_s3_file", "filter_log_events", b"filter_log_events", "metric_execution", b"metric_execution", "rds_get_sql_query_performance_stats", b"rds_get_sql_query_performance_stats", "task", b"task"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ecs_get_task_logs", b"ecs_get_task_logs", "ecs_list_clusters", b"ecs_list_clusters", "ecs_list_tasks", b"ecs_list_tasks", "fetch_dashboard", b"fetch_dashboard", "fetch_s3_file", b"fetch_s3_file", "filter_log_events", b"filter_log_events", "metric_execution", b"metric_execution", "rds_get_sql_query_performance_stats", b"rds_get_sql_query_performance_stats", "task", b"task", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["task", b"task"]) -> typing_extensions.Literal["metric_execution", "filter_log_events", "rds_get_sql_query_performance_stats", "ecs_list_clusters", "ecs_list_tasks", "ecs_get_task_logs", "fetch_dashboard", "fetch_s3_file"] | None: ...

global___Cloudwatch = Cloudwatch
