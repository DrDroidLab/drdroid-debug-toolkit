"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ElasticSearch(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TaskType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TaskTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ElasticSearch._TaskType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: ElasticSearch._TaskType.ValueType  # 0
        QUERY_LOGS: ElasticSearch._TaskType.ValueType  # 1
        CHECK_CLUSTER_HEALTH: ElasticSearch._TaskType.ValueType  # 2
        NODE_STATS: ElasticSearch._TaskType.ValueType  # 3
        CAT_INDICES: ElasticSearch._TaskType.ValueType  # 4
        CAT_THREAD_POOL_SEARCH: ElasticSearch._TaskType.ValueType  # 5
        MONITORING_CLUSTER_STATS: ElasticSearch._TaskType.ValueType  # 6
        GET_METRIC_FOR_SERVICE: ElasticSearch._TaskType.ValueType  # 7
        GET_DASHBOARD: ElasticSearch._TaskType.ValueType  # 8

    class TaskType(_TaskType, metaclass=_TaskTypeEnumTypeWrapper): ...
    UNKNOWN: ElasticSearch.TaskType.ValueType  # 0
    QUERY_LOGS: ElasticSearch.TaskType.ValueType  # 1
    CHECK_CLUSTER_HEALTH: ElasticSearch.TaskType.ValueType  # 2
    NODE_STATS: ElasticSearch.TaskType.ValueType  # 3
    CAT_INDICES: ElasticSearch.TaskType.ValueType  # 4
    CAT_THREAD_POOL_SEARCH: ElasticSearch.TaskType.ValueType  # 5
    MONITORING_CLUSTER_STATS: ElasticSearch.TaskType.ValueType  # 6
    GET_METRIC_FOR_SERVICE: ElasticSearch.TaskType.ValueType  # 7
    GET_DASHBOARD: ElasticSearch.TaskType.ValueType  # 8

    @typing_extensions.final
    class QueryLogs(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INDEX_FIELD_NUMBER: builtins.int
        LUCENE_QUERY_FIELD_NUMBER: builtins.int
        LIMIT_FIELD_NUMBER: builtins.int
        OFFSET_FIELD_NUMBER: builtins.int
        SORT_DESC_FIELD_NUMBER: builtins.int
        TIMESTAMP_FIELD_FIELD_NUMBER: builtins.int
        @property
        def index(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def lucene_query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def limit(self) -> google.protobuf.wrappers_pb2.UInt64Value: ...
        @property
        def offset(self) -> google.protobuf.wrappers_pb2.UInt64Value: ...
        @property
        def sort_desc(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def timestamp_field(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            index: google.protobuf.wrappers_pb2.StringValue | None = ...,
            lucene_query: google.protobuf.wrappers_pb2.StringValue | None = ...,
            limit: google.protobuf.wrappers_pb2.UInt64Value | None = ...,
            offset: google.protobuf.wrappers_pb2.UInt64Value | None = ...,
            sort_desc: google.protobuf.wrappers_pb2.StringValue | None = ...,
            timestamp_field: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["index", b"index", "limit", b"limit", "lucene_query", b"lucene_query", "offset", b"offset", "sort_desc", b"sort_desc", "timestamp_field", b"timestamp_field"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["index", b"index", "limit", b"limit", "lucene_query", b"lucene_query", "offset", b"offset", "sort_desc", b"sort_desc", "timestamp_field", b"timestamp_field"]) -> None: ...

    @typing_extensions.final
    class ClusterHealth(google.protobuf.message.Message):
        """No parameters needed for cluster health check"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class NodeStats(google.protobuf.message.Message):
        """No parameters needed for node stats"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class CatIndices(google.protobuf.message.Message):
        """No parameters needed for cat indices"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class CatThreadPoolSearch(google.protobuf.message.Message):
        """No parameters needed for cat thread pool search"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing_extensions.final
    class MonitoringClusterStats(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WIDGET_NAME_FIELD_NUMBER: builtins.int
        INTERVAL_FIELD_NUMBER: builtins.int
        @property
        def widget_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def interval(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            widget_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            interval: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interval", b"interval", "widget_name", b"widget_name"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["interval", b"interval", "widget_name", b"widget_name"]) -> None: ...

    @typing_extensions.final
    class GetMetricForService(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SERVICE_NAME_FIELD_NUMBER: builtins.int
        INTERVAL_FIELD_NUMBER: builtins.int
        @property
        def service_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def interval(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            service_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            interval: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interval", b"interval", "service_name", b"service_name"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["interval", b"interval", "service_name", b"service_name"]) -> None: ...

    @typing_extensions.final
    class GetDashboard(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DASHBOARD_NAME_FIELD_NUMBER: builtins.int
        @property
        def dashboard_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            dashboard_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["dashboard_name", b"dashboard_name"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dashboard_name", b"dashboard_name"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    QUERY_LOGS_FIELD_NUMBER: builtins.int
    CHECK_CLUSTER_HEALTH_FIELD_NUMBER: builtins.int
    NODE_STATS_FIELD_NUMBER: builtins.int
    CAT_INDICES_FIELD_NUMBER: builtins.int
    CAT_THREAD_POOL_SEARCH_FIELD_NUMBER: builtins.int
    MONITORING_CLUSTER_STATS_FIELD_NUMBER: builtins.int
    GET_METRIC_FOR_SERVICE_FIELD_NUMBER: builtins.int
    GET_DASHBOARD_FIELD_NUMBER: builtins.int
    type: global___ElasticSearch.TaskType.ValueType
    @property
    def query_logs(self) -> global___ElasticSearch.QueryLogs: ...
    @property
    def check_cluster_health(self) -> global___ElasticSearch.ClusterHealth: ...
    @property
    def node_stats(self) -> global___ElasticSearch.NodeStats: ...
    @property
    def cat_indices(self) -> global___ElasticSearch.CatIndices: ...
    @property
    def cat_thread_pool_search(self) -> global___ElasticSearch.CatThreadPoolSearch: ...
    @property
    def monitoring_cluster_stats(self) -> global___ElasticSearch.MonitoringClusterStats: ...
    @property
    def get_metric_for_service(self) -> global___ElasticSearch.GetMetricForService: ...
    @property
    def get_dashboard(self) -> global___ElasticSearch.GetDashboard: ...
    def __init__(
        self,
        *,
        type: global___ElasticSearch.TaskType.ValueType = ...,
        query_logs: global___ElasticSearch.QueryLogs | None = ...,
        check_cluster_health: global___ElasticSearch.ClusterHealth | None = ...,
        node_stats: global___ElasticSearch.NodeStats | None = ...,
        cat_indices: global___ElasticSearch.CatIndices | None = ...,
        cat_thread_pool_search: global___ElasticSearch.CatThreadPoolSearch | None = ...,
        monitoring_cluster_stats: global___ElasticSearch.MonitoringClusterStats | None = ...,
        get_metric_for_service: global___ElasticSearch.GetMetricForService | None = ...,
        get_dashboard: global___ElasticSearch.GetDashboard | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cat_indices", b"cat_indices", "cat_thread_pool_search", b"cat_thread_pool_search", "check_cluster_health", b"check_cluster_health", "get_dashboard", b"get_dashboard", "get_metric_for_service", b"get_metric_for_service", "monitoring_cluster_stats", b"monitoring_cluster_stats", "node_stats", b"node_stats", "query_logs", b"query_logs", "task", b"task"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cat_indices", b"cat_indices", "cat_thread_pool_search", b"cat_thread_pool_search", "check_cluster_health", b"check_cluster_health", "get_dashboard", b"get_dashboard", "get_metric_for_service", b"get_metric_for_service", "monitoring_cluster_stats", b"monitoring_cluster_stats", "node_stats", b"node_stats", "query_logs", b"query_logs", "task", b"task", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["task", b"task"]) -> typing_extensions.Literal["query_logs", "check_cluster_health", "node_stats", "cat_indices", "cat_thread_pool_search", "monitoring_cluster_stats", "get_metric_for_service", "get_dashboard"] | None: ...

global___ElasticSearch = ElasticSearch
